{
  "name": "samadhanhub",
  "version": "1.0.0",
  "description": "Samadhan Hub - Agnivirya Ancient Modern Wellness Platform",
  "main": "api/server.js",
  "scripts": {
    "dev": "npm run dev:start",
    "dev:start": "cross-env NODE_ENV=development APP_MODE=dev concurrently \"npm run server:dev\" \"npm run client:dev\"",
    "dev:server": "cross-env NODE_ENV=development APP_MODE=dev npm run server:dev",
    "dev:client": "npm run client:dev",
    "prod": "npm run prod:start",
    "prod:start": "cross-env NODE_ENV=production APP_MODE=prod npm run server:start",
    "prod:build": "npm run client:build",
    "build": "npm run client:build",
    "start": "npm run server:start",
    "server:dev": "nodemon api/server.js",
    "server:start": "node api/server.js",
    "client:dev": "cd client-agnivirya && npm run dev",
    "client:build": "cd client-agnivirya && npm run build",
    "client:preview": "cd client-agnivirya && npm run preview",
    "install:all": "npm install && cd client-agnivirya && npm install",
    "setup": "npm run install:all && npm run build",
    "ssr:build": "npm run client:build && npm run server:start",
    "vercel-build": "node vercel-build.js",
    "vercel-dev": "npm run dev",
    "mode:dev": "echo Setting mode to DEV && npm run dev",
    "mode:prod": "echo Setting mode to PROD && npm run prod",
    "config:show": "node -e \"require('http').get('http://localhost:' + (process.env.PORT || 5000) + '/api/config', (res) => { let data = ''; res.on('data', chunk => data += chunk); res.on('end', () => console.log(data)); }).on('error', () => console.log('Server not running'))\"",
    "clean": "rimraf client-agnivirya/dist client-agnivirya/node_modules/.vite",
    "clean:all": "npm run clean && rimraf node_modules client-agnivirya/node_modules",
    "lint": "npm run lint:client && npm run lint:server",
    "lint:client": "cd client-agnivirya && npm run lint",
    "lint:server": "eslint api/**/*.js",
    "format": "prettier --write \"**/*.{js,ts,tsx,json,md}\"",
    "type-check": "cd client-agnivirya && npm run type-check",
    "test": "npm run test:client && npm run test:server",
    "test:client": "cd client-agnivirya && npm test",
    "test:server": "echo \"Server tests not configured yet\"",
    "docker:build": "docker build -t samadhanhub .",
    "docker:run": "docker run -p ${PORT:-5000}:${PORT:-5000} samadhanhub",
    "logs": "npm run logs:server",
    "logs:server": "node -e \"const fs = require('fs'); const path = require('path'); const logFile = path.join('api', 'logs', 'app.log'); if (fs.existsSync(logFile)) { require('fs').createReadStream(logFile).pipe(process.stdout); } else { console.log('No log file found at:', logFile); }\"",
    "health": "node -e \"require('http').get('http://localhost:' + (process.env.PORT || 5000) + '/health', (res) => { console.log('Server health:', res.statusCode === 200 ? 'OK' : 'ERROR'); }).on('error', () => console.log('Server not responding'))\"",
    "port:show": "echo \"Server port: ${PORT:-5000}\"",
    "kill:port": "node -e \"const { exec } = require('child_process'); const port = process.env.PORT || 5000; exec('npx kill-port ' + port, (err) => { if (err) console.log('Port', port, 'is not in use'); else console.log('Killed process on port', port); });\"",
    "reset": "npm run clean && npm run install:all && npm run build",
    "env:setup": "if [ ! -f .env ]; then cp env.template .env && echo 'Created .env from template'; else echo '.env already exists'; fi",
    "env:validate": "node -e \"require('dotenv').config(); const required = ['PORT', 'NODE_ENV']; const missing = required.filter(key => !process.env[key]); if (missing.length > 0) { console.error('Missing required env vars:', missing); process.exit(1); } else { console.log('Environment validation passed'); }\"",
    "dev:check": "npm run env:validate && npm run dev"
  },
  "keywords": [
    "react",
    "nodejs",
    "express",
    "fullstack",
    "ssr",
    "server-side-rendering",
    "vercel",
    "dev",
    "prod"
  ],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "eslint": "^8.53.0",
    "kill-port": "^2.0.1",
    "nodemon": "^3.0.2",
    "prettier": "^3.1.0",
    "rimraf": "^5.0.5"
  },
  "dependencies": {
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^8.0.1",
    "helmet": "^7.1.0",
    "morgan": "^1.10.0",
    "node-fetch": "^2.7.0"
  }
}
